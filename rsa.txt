import math

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def mod_inverse(e, phi):
    for d in range(2, phi):
        if (e * d) % phi == 1:
            return d
    return -1

def generate_keys():
    p = 7919
    q = 1009
    n = p * q
    phi = (p - 1) * (q - 1)
    e = next(e for e in range(2, phi) if gcd(e, phi) == 1)
    d = mod_inverse(e, phi)
    return e, d, n

def encrypt(message, e, n):
    return pow(message, e, n)

def decrypt(ciphertext, d, n):
    return pow(ciphertext, d, n)

if __name__ == "__main__":
    e, d, n = generate_keys()
    print(f"Public Key (e, n): ({e}, {n})")
    print(f"Private Key (d, n): ({d}, {n})")
    message = 123
    print(f"Original Message: {message}")
    encrypted_message = encrypt(message, e, n)
    print(f"Encrypted Message: {encrypted_message}")
    decrypted_message = decrypt(encrypted_message, d, n)
    print(f"Decrypted Message: {decrypted_message}")
